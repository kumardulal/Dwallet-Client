{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\New  Leaders Tech\\\\Desktop\\\\DWALLET\\\\dwallet-project\\\\client\\\\app\\\\components\\\\ImagePicker.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect } from 'react';\nimport Image from \"react-native-web/dist/exports/Image\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport * as ImagePicker from 'expo-image-picker';\nimport { TouchableOpacity } from 'react-native-gesture-handler';\nexport default function Imagepicker(_ref) {\n  var setupdateimage = _ref.setupdateimage;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      image = _useState2[0],\n      setImage = _useState2[1];\n\n  useEffect(function () {\n    (function _callee() {\n      var _await$ImagePicker$re, status;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(Platform.OS !== 'web')) {\n                _context.next = 6;\n                break;\n              }\n\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(ImagePicker.requestMediaLibraryPermissionsAsync());\n\n            case 3:\n              _await$ImagePicker$re = _context.sent;\n              status = _await$ImagePicker$re.status;\n\n              if (status !== 'granted') {\n                alert('Sorry, we need camera roll permissions to make this work!');\n              }\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  }, []);\n\n  var pickImage = function pickImage() {\n    var result;\n    return _regeneratorRuntime.async(function pickImage$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(ImagePicker.launchImageLibraryAsync({\n              mediaTypes: ImagePicker.MediaTypeOptions.All,\n              allowsEditing: true,\n              aspect: [4, 3],\n              quality: 1\n            }));\n\n          case 3:\n            result = _context2.sent;\n\n            if (!result.cancelled) {\n              setImage(result.uri);\n              setupdateimage(result.uri);\n            }\n\n            _context2.next = 10;\n            break;\n\n          case 7:\n            _context2.prev = 7;\n            _context2.t0 = _context2[\"catch\"](0);\n            Alert.alert('Failed to process the Image');\n\n          case 10:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 7]], Promise);\n  };\n\n  return React.createElement(View, {\n    style: styles.imagecontainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }, React.createElement(TouchableOpacity, {\n    onPress: pickImage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }\n  }, React.createElement(Image, {\n    style: styles.imageupload,\n    source: require(\"../assets/profile.png\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 17\n    }\n  })), React.createElement(View, {\n    style: styles.imagecontainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }\n  }, image && React.createElement(Image, {\n    source: {\n      uri: image\n    },\n    style: styles.uploadedimageview,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 27\n    }\n  })));\n}\nvar styles = StyleSheet.create({\n  imageupload: {\n    marginTop: 10,\n    height: 120,\n    width: 300\n  },\n  imagecontainer: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  uploadedimageview: {\n    width: 200,\n    height: 210,\n    borderRadius: 25,\n    bottom: 25\n  }\n});","map":{"version":3,"sources":["C:/Users/New  Leaders Tech/Desktop/DWALLET/dwallet-project/client/app/components/ImagePicker.js"],"names":["React","useState","useEffect","ImagePicker","TouchableOpacity","Imagepicker","setupdateimage","image","setImage","Platform","OS","requestMediaLibraryPermissionsAsync","status","alert","pickImage","launchImageLibraryAsync","mediaTypes","MediaTypeOptions","All","allowsEditing","aspect","quality","result","cancelled","uri","Alert","styles","imagecontainer","imageupload","require","uploadedimageview","StyleSheet","create","marginTop","height","width","flex","alignItems","justifyContent","borderRadius","bottom"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Image, View, Platform, StyleSheet } from 'react-native';\r\nimport * as ImagePicker from 'expo-image-picker';\r\nimport { TouchableOpacity } from 'react-native-gesture-handler';\r\n\r\nexport default function Imagepicker({ setupdateimage }) {\r\n    const [image, setImage] = useState(null);\r\n\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            if (Platform.OS !== 'web') {\r\n                const { status } = await ImagePicker.requestMediaLibraryPermissionsAsync();\r\n                if (status !== 'granted') {\r\n                    alert('Sorry, we need camera roll permissions to make this work!');\r\n                }\r\n            }\r\n        })();\r\n    }, []);\r\n\r\n\r\n    const pickImage = async () => {\r\n        try {\r\n\r\n            let result = await ImagePicker.launchImageLibraryAsync({\r\n                mediaTypes: ImagePicker.MediaTypeOptions.All,\r\n                allowsEditing: true,\r\n                aspect: [4, 3],\r\n                quality: 1,\r\n            });\r\n\r\n\r\n            if (!result.cancelled) {\r\n                setImage(result.uri);\r\n                setupdateimage(result.uri);\r\n\r\n            }\r\n        } catch (error) {\r\n            Alert.alert('Failed to process the Image')\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n    return (\r\n\r\n        <View style={styles.imagecontainer}>\r\n            <TouchableOpacity\r\n                onPress={pickImage} >\r\n                <Image style={styles.imageupload}\r\n                    source={require(\"../assets/profile.png\")} />\r\n\r\n            </TouchableOpacity>\r\n\r\n            <View style={styles.imagecontainer}>\r\n                {image && <Image source={{ uri: image }}\r\n                    style={styles.uploadedimageview} />}\r\n            </View>\r\n        </View>\r\n\r\n\r\n\r\n\r\n    );\r\n}\r\nconst styles = StyleSheet.create({\r\n    imageupload: {\r\n        marginTop: 10,\r\n        height: 120,\r\n        width: 300,\r\n\r\n    },\r\n    imagecontainer: {\r\n        flex: 1,\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n\r\n\r\n    },\r\n    uploadedimageview: {\r\n        width: 200,\r\n        height: 210,\r\n        borderRadius: 25,\r\n        bottom: 25,\r\n    }\r\n})\r\n\r\n"]},"metadata":{},"sourceType":"module"}